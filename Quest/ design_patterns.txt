что такое паттерны проектирования?
/
Паттерн проектирования — это часто встречающееся решение определённой проблемы 
при проектировании архитектуры программ.

В отличие от готовых функций или библиотек, паттерн нельзя просто взять и скопировать в программу. 
Паттерн представляет собой не какой-то конкретный код, а общую концепцию решения той или иной проблемы, 
которую нужно будет ещё подстроить под нужды вашей программы.

Паттерны часто путают с алгоритмами, ведь оба понятия описывают типовые решения каких-то известных проблем. 
Но если алгоритм — это чёткий набор действий, то паттерн — это высокоуровневое описание решения, реализация 
которого может отличаться в двух разных программах.

Если привести аналогии, то алгоритм — это кулинарный рецепт с чёткими шагами, 
а паттерн — инженерный чертёж, на котором нарисовано решение, но не конкретные шаги его реализации.
------------------------------------------------------------------------------------------------------------
Из чего состоит паттерн?
/
Описания паттернов обычно очень формальны и чаще всего состоят из таких пунктов:
- проблема, которую решает паттерн;
- мотивации к решению проблемы способом, который предлагает паттерн;
- структуры классов, составляющих решение;
- примера на одном из языков программирования;
- особенностей реализации в различных контекстах;
- связей с другими паттернами.
Такой формализм в описании позволил создать обширный каталог паттернов, 
проверив каждый из них на состоятельность.
------------------------------------------------------------------------------------------------------------
Зачем знать паттерны?
/
- Проверенные решения. Вы тратите меньше времени, используя готовые решения, вместо повторного 
изобретения велосипеда. До некоторых решений вы смогли бы додуматься и сами, 
но многие могут быть для вас открытием.
- Стандартизация кода. Вы делаете меньше просчётов при проектировании, 
используя типовые унифицированные решения, так как все скрытые проблемы в них уже давно найдены.
- Общий программистский словарь. Вы произносите название паттерна, вместо того, чтобы час объяснять 
другим программистам, какой крутой дизайн вы придумали и какие классы для этого нужны.
------------------------------------------------------------------------------------------------------------
Классификация паттернов
/
Самые низкоуровневые и простые паттерны — идиомы. Они не универсальны, 
поскольку применимы только в рамках одного языка программирования.
+
Самые универсальные — архитектурные паттерны, которые можно реализовать практически на любом языке. 
Они нужны для проектирования всей программы, а не отдельных её элементов.

Кроме того, паттерны отличаются и предназначением:

- Порождающие паттерны беспокоятся о гибком создании объектов без внесения в программу лишних зависимостей.
- Структурные паттерны показывают различные способы построения связей между объектами.
- Поведенческие паттерны заботятся об эффективной коммуникации между объектами.
------------------------------------------------------------------------------------------------------------
Каталог паттернов проектирования
/
Порождающие паттерны:

- Фабричный метод — это порождающий паттерн проектирования, который определяет общий 
интерфейс для создания объектов в суперклассе, позволяя подклассам изменять тип создаваемых объектов.

- Абстрактная фабрика — это порождающий паттерн проектирования, который позволяет создавать семейства 
связанных объектов, не привязываясь к конкретным классам создаваемых объектов.

- Строитель — это порождающий паттерн проектирования, который позволяет создавать сложные объекты пошагово. 
Строитель даёт возможность использовать один и тот же код строительства для получения разных 
представлений объектов.

- Прототип — это порождающий паттерн проектирования, который позволяет копировать объекты, 
не вдаваясь в подробности их реализации.

- Одиночка — это порождающий паттерн проектирования, который гарантирует, 
что у класса есть только один экземпляр, и предоставляет к нему глобальную точку доступа.

Структурные паттерны:

- Адаптер — это структурный паттерн проектирования, который позволяет 
объектам с несовместимыми интерфейсами работать вместе.

- Мост — это структурный паттерн проектирования, который разделяет один или несколько классов 
на две отдельные иерархии — абстракцию и реализацию, позволяя изменять их независимо друг от друга.

- Компоновщик — это структурный паттерн проектирования, который позволяет сгруппировать множество объектов 
в древовидную структуру, а затем работать с ней так, как будто это единичный объект.

- Декоратор — это структурный паттерн проектирования, который позволяет динамически добавлять объектам 
новую функциональность, оборачивая их в полезные «обёртки».

- Фасад — это структурный паттерн проектирования, который предоставляет простой интерфейс 
к сложной системе классов, библиотеке или фреймворку.

- Легковес — это структурный паттерн проектирования, который позволяет вместить большее 
количество объектов в отведённую оперативную память. Легковес экономит память, разделяя 
общее состояние объектов между собой, вместо хранения одинаковых данных в каждом объекте.

- Заместитель — это структурный паттерн проектирования, который позволяет подставлять вместо 
реальных объектов специальные объекты-заменители. Эти объекты перехватывают вызовы к оригинальному 
объекту, позволяя сделать что-то до или после передачи вызова оригиналу.

Поведенческие паттерны:

- Цепочка обязанностей — это поведенческий паттерн проектирования, который позволяет передавать 
запросы последовательно по цепочке обработчиков. Каждый последующий обработчик решает, может ли он 
обработать запрос сам и стоит ли передавать запрос дальше по цепи.

- Команда — это поведенческий паттерн проектирования, который превращает запросы в объекты, 
позволяя передавать их как аргументы при вызове методов, ставить запросы в очередь, логировать их, 
а также поддерживать отмену операций.

- Итератор — это поведенческий паттерн проектирования, который даёт возможность последовательно 
обходить элементы составных объектов, не раскрывая их внутреннего представления.

- Посредник — это поведенческий паттерн проектирования, который позволяет уменьшить связанность 
множества классов между собой, благодаря перемещению этих связей в один класс-посредник.

- Снимок — это поведенческий паттерн проектирования, который позволяет сохранять и восстанавливать 
прошлые состояния объектов, не раскрывая подробностей их реализации.

- Наблюдатель — это поведенческий паттерн проектирования, который создаёт механизм подписки, 
позволяющий одним объектам следить и реагировать на события, происходящие в других объектах.

- Состояние — это поведенческий паттерн проектирования, который позволяет объектам менять поведение 
в зависимости от своего состояния. Извне создаётся впечатление, что изменился класс объекта.

- Стратегия — это поведенческий паттерн проектирования, который определяет семейство схожих алгоритмов 
и помещает каждый из них в собственный класс, после чего алгоритмы можно взаимозаменять 
прямо во время исполнения программы.

- Шаблонный метод — это поведенческий паттерн проектирования, который определяет скелет алгоритма, 
перекладывая ответственность за некоторые его шаги на подклассы. Паттерн позволяет подклассам 
переопределять шаги алгоритма, не меняя его общей структуры.

- Посетитель — это поведенческий паттерн проектирования, который позволяет добавлять в программу 
новые операции, не изменяя классы объектов, над которыми эти операции могут выполняться.
------------------------------------------------------------------------------------------------------------
/
------------------------------------------------------------------------------------------------------------