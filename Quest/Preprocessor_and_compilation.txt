Як проходить процес компіляції срр-файлів у бінарний файл?
/
1. Препроцессинг
Все заголовочные файлы с директивой инклуд копирается в единицу трансляции, где естественно они обьявлены.
Все макросы подставляют значения
и проверяются условия если они есть

2. Компиляция
Превращение файла исходного когда в код ассемблера

3.Ассемблирование
Преврощение кода ассемблера в бинарный код(машинный)

Все спп файлы до этого момента компилируются отдельно, как отдельная единица трансляции

4. Линковка
линковка собирает все обьектные файлы в исполняемый файл.
------------------------------------------------------------------------------------------------------------
Що таке препроцесор?
/
програма, яка виконує попередню обробку даних, для того, 
щоб вони могли використовуватись іншою програмою, наприклад, такою як компілятор.
------------------------------------------------------------------------------------------------------------
Як працює препроцесор?
/
Препроцессор выполняет предварительные операции с файлами C++ перед их передачей компилятору. 
Препроцессор можно использовать для условной компиляции кода, вставки файлов, 
задания сообщений для ошибок времени компиляции, 
а также для применения правил, зависящих от компьютера, к разделам кода.
------------------------------------------------------------------------------------------------------------
Які знаєте його команди?
/
директива
макросы
условная компиляция
------------------------------------------------------------------------------------------------------------
Як працює директива include?
/
Эта модификация используется для подключения системных файлов. 
При ее выполнении производится поиск файла с именем FILE в списке указанных заранее каталогов,
а затем в стандартном списке системных каталогов.
------------------------------------------------------------------------------------------------------------
Як працює директива define?
/
Директива #define позволяет вводить в текст программы константы и макроопределения. 
Поля Идентификатор и Замена разделяются одним или несколькими пробелами. 
Директива #define указывает компилятору, что нужно подставить строку, 
определенную аргументом Замена, вместо каждого аргумента Идентификатор в исходном файле.
------------------------------------------------------------------------------------------------------------
Що саме лінкує лінкер?
/
связывает обьектные файлы(единицы трансляции)
обьеденяя их в исполняемый файл
------------------------------------------------------------------------------------------------------------
Що таке оптимізація компілятора?
/
Оптимизация — это процесс преобразования фрагмента кода в другой фрагмент, 
который функционально эквивалентен исходному, с целью улучшения одной или нескольких его характеристик, 
из которых наиболее важными являются скорость и размер кода
/
есть 4 способа оптимизировать компилятор
1.Пишите читаемый код, который легко поддерживать. Не думайте про разные ООП-фичи 
Visual C++ как о злейшем враге производительности. Последняя версия Visual 
C++ сможет свести накладные расходы от ООП к минимуму, а иногда даже полностью от них избавиться.
/
2.Используйте директивы компилятора. Например, скажите компилятору использовать 
то соглашение о вызове функций, которое будет быстрее того, которое стоит по умолчанию.
/
3.Используйте встроенные в компилятор функции. Это такие специальные функции, 
реализация которых обеспечивается компилятором автоматически. Помните, что компилятор обладает 
глубоким знанием того, как эффективно расположить последовательность машинных команд так, 
чтобы код работал максимально быстро на указанной программной архитектуре.
/
4. Используйте profile-guided optimization (PGO). Благодаря этой технологии, компилятор знает больше о том, 
как код будет вести себя во время работы и оптимизирует его соответствующем образом.
------------------------------------------------------------------------------------------------------------
Що таке прапорці компіляції?
/
С флагами компилятор начнет отображать все возможные предупреждения. 
Для создания чистого переносимого кода желательно (хотя это и не всегда возможно, поэтому тут без фанатизма) 
избавляться от предупреждений в "полном" режиме отображения возможных проблем. 
Хотя, встретить настолько педантичных разработчиков очень сложно.
------------------------------------------------------------------------------------------------------------
Як захистити хедер від повторного включення?
/
#ifndef XXX_H      ||      #pragma once
#define XXX_H
#endif
------------------------------------------------------------------------------------------------------------
Що робить директива include?
/
Этот тип директивы препроцессора указывает компилятору включить файл в исходный код программы
------------------------------------------------------------------------------------------------------------
Як працюють макроси?
/
Посдавляют вместо имени макроса его определение
Макросы - это препроцессорные "функции" , т.е. 
лексемы, созданные с помощью директивы #define, которые принимают параметры подобно функциям. 
После директивы #define указывается имя макроса, за которым в скобках 
(без пробелов) параметры, отделенные запятыми и определение макроса, отделенное пробелом.
------------------------------------------------------------------------------------------------------------


этапы сборки:

1) ПРЕПРОЦЕССИНГ
Препроцессор — это макро процессор, который преобразовывает вашу программу для дальнейшего компилирования. 
На данной стадии происходит происходит работа с препроцессорными директивами. 
Например, препроцессор добавляет хэдеры в код (#include), убирает комментирования, 
заменяет макросы (#define) их значениями, выбирает нужные куски кода в соответствии с условиями 
#if, #ifdef и #ifndef.


2) КОМПИЛЯЦИЯ
На данном шаге g++ выполняет свою главную задачу — компилирует, 
то есть преобразует полученный на прошлом шаге код без директив в ассемблерный код. 
Это промежуточный шаг между высокоуровневым языком и машинным (бинарным) кодом.

3) АССЕМБЛИРОВАНИЕ
Так как x86 процессоры исполняют команды на бинарном коде, 
необходимо перевести ассемблерный код в машинный с помощью ассемблера.
Ассемблер преобразовывает ассемблерный код в машинный код, сохраняя его в объектном файле.
Объектный файл — это созданный ассемблером промежуточный файл, хранящий кусок машинного кода. 
Этот кусок машинного кода, который еще не был связан 
вместе с другими кусками машинного кода в конечную выполняемую программу, называется объектным кодом.
Далее возможно сохранение данного объектного кода в статические библиотеки для того, 
чтобы не компилировать данный код снова.

4) КОМПОНОВКА (ЛИНКОВКА)
Компоновщик (линкер) связывает все объектные файлы и статические библиотеки в единый исполняемый файл, 
который мы и сможем запустить в дальнейшем.
Для того, чтобы понять как происходит связка, следует рассказать о таблице символов.


внутреннее и внешнее связывание

внешнее связывание имеют те сущности, к которым можно обратиться в единице трансляции, 
отличной от той, где они определены.(extern к примеру, можно также определение функции(прототип))

Внутренее связывание отличается от внешнего тем, 
что к сущности имеющей внутренее связывание нельзя обратиться из единицы трансляции, 
отличной от той, где она определена. (static к примеру или namespace)