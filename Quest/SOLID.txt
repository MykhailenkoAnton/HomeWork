принципы солид - 5 принципов ооп описывающие архитектуру програмного обеспечения(приложения)

плюсы ооп - Инкапсуляция отдельных сущностейь, прозрачная организация архитектуры - как раз оба эти плюса и получаются при испольнывании принципов,
общая идея которого говорит о том что при испольнывании сразу нескольких принципов вместе лучше чем испольнывания их по отдельности


Single responsibility - принцип единой ответственности
Open-closed - открытости и закрытости
Liskov substitution - принцип подстановки Барбара Лисков
Interface segregation - разделение интерфейсов
Dependency inversion - инверсия зависимости

Каждый из принципов - совет по организации архитектуры проекта. У каждого есть своя область и границаа применения.

Single responsibility - принцип единой ответственности:
Класс - должен отвечать за что-то одно. 
В Идеале при возникновении действия должен затрагиваться один класс.
Класс должен иметь одну причину изменяться


Open-closed - открытости и закрытости
Кшасс должен быть открыт для расширения но закрыт для модификации.  
Новое поведение должно добаввляться с добавлением новых сущностей а не с изменением старых


Liskov substitution - принцип подстановки Барбара Лисков
принцип гласит что вы должны иметь возможность использывать любой производный класс вместо базового и вести себя
с ним так же без внесения изменения

Interface segregation - разделение интерфейсов
Большие интерфейсы необходимо разделять на более мелкие и специфические, что бы клиенты (в данном случае класс который наследуется от интерфейса)
знали только о методах, которые им необходимы в работе

Dependency inversion - инверсия зависимости
Все взаимосвязи в программе должны поддерживаться с помощью абстрактных классов или интерфейсами
Принцип гласит: Во первых классы высокого уровня не должны зависеть от низкоуровневых классов. При этом оба должны зависеть от абстраций.
Во вторых абстрации не должны зависеть от делатей, но делати должны зависеть от абстраций.
